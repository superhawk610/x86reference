{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/movdqa:vmovdqa32:vmovdqa64",
    "result": {"pageContext":{"op":{"id":"movdqa:vmovdqa32:vmovdqa64","variants":["MOVDQA","VMOVDQA64","VMOVDQA","VMOVDQA32"],"variant_descriptions":{"MOVDQA":"Move aligned packed integer values from xmm1 to xmm2/mem.","VMOVDQA":"Move aligned packed integer values from ymm1 to ymm2/mem.","VMOVDQA32":"Move aligned packed doubleword integer values from zmm1 to zmm2/m512 using writemask k1.","VMOVDQA64":"Move aligned packed quadword integer values from zmm1 to zmm2/m512 using writemask k1."},"text":"<p>Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD.</p><p>EVEX encoded versions:</p><p>Moves 128, 256 or 512 bits of packed doubleword/quadword integer values from the source operand (the second operand) to the destination operand (the first operand). This instruction can be used to load a vector register from an int32/int64 memory location, to store the contents of a vector register into an int32/int64 memory location, or to move data between two ZMM registers. When the source or destination operand is a memory operand, the operand must be aligned on a 16 (EVEX.128)/32(EVEX.256)/64(EVEX.512)-byte boundary or a general-protection exception (#GP) will be generated. To move integer data to and from unaligned memory locations, use the VMOVDQU instruction.</p><p>The destination operand is updated at 32-bit (VMOVDQA32) or 64-bit (VMOVDQA64) granularity according to the writemask.</p><p>VEX.256 encoded version:</p><p>Moves 256 bits of packed integer values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a YMM register from a 256-bit memory location, to store the contents of a YMM register into a 256-bit memory location, or to move data between two YMM registers.</p><p>When the source or destination operand is a memory operand, the operand must be aligned on a 32-byte boundary or a general-protection exception (#GP) will be generated. To move integer data to and from unaligned memory locations, use the VMOVDQU instruction. Bits (MAXVL-1:256) of the destination register are zeroed.</p>","href":"https://www.felixcloutier.com/x86/MOVDQA%3AVMOVDQA32%3AVMOVDQA64.html"}}},
    "staticQueryHashes": ["3832154866","63159454"]}