{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/subsd",
    "result": {"pageContext":{"op":{"id":"subsd","variants":["SUBSD","VSUBSD"],"variant_descriptions":{"SUBSD":"Subtract the low double-precision floating-point value in xmm2/m64 from xmm1 and store the result in xmm1.","VSUBSD":"Subtract the low double-precision floating-point value in xmm3/m64 from xmm2 and store the result in xmm1 under writemask k1."},"text":"<p>Subtract the low double-precision floating-point value in the second source operand from the first source operand and stores the double-precision floating-point result in the low quadword of the destination operand.</p><p>The second source operand can be an XMM register or a 64-bit memory location. The first source and destination operands are XMM registers.</p><p>128-bit Legacy SSE version: The destination and first source operand are the same. Bits (MAXVL-1:64) of the corresponding destination register remain unchanged.</p><p>VEX.128 and EVEX encoded versions: Bits (127:64) of the XMM register destination are copied from corresponding bits in the first source operand. Bits (MAXVL-1:128) of the destination register are zeroed.</p><p>EVEX encoded version: The low quadword element of the destination operand is updated according to the writemask.</p><p>Software should ensure VSUBSD is encoded with VEX.L=0. Encoding VSUBSD with VEX.L=1 may encounter unpredictable behavior across different processor generations.</p>","href":"https://www.felixcloutier.com/x86/SUBSD.html"}}},
    "staticQueryHashes": ["3832154866","63159454"]}