{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/paddb:paddw:paddd:paddq",
    "result": {"pageContext":{"op":{"id":"paddb:paddw:paddd:paddq","variants":["VPADDW","VPADDD","VPADDQ","PADDW","PADDQ","VPADDB","PADDD","PADDB"],"variant_descriptions":{"PADDB":"Add packed byte integers from xmm2/m128 and xmm1.","PADDW":"Add packed word integers from xmm2/m128 and xmm1.","PADDD":"Add packed doubleword integers from xmm2/m128 and xmm1.","PADDQ":"Add packed quadword integers from xmm2/m128 and xmm1.","VPADDB":"Add packed byte integers from zmm2, and zmm3/m512 and store in zmm1 using writemask k1.","VPADDW":"Add packed word integers from zmm2, and zmm3/m512 and store in zmm1 using writemask k1.","VPADDD":"Add packed doubleword integers from zmm2, zmm3/m512/m32bcst and store in zmm1 using writemask k1.","VPADDQ":"Add packed quadword integers from zmm2, zmm3/m512/m64bcst and store in zmm1 using writemask k1."},"text":"<p>Performs a SIMD add of the packed integers from the source operand (second operand) and the destination operand (first operand), and stores the packed integer results in the destination operand. See <span class=\"not-imported\">Figure 9-4</span> in the <em>Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1</em>, for an illustration of a SIMD operation. Overflow is handled with wraparound, as described in the following paragraphs.</p><p>The PADDB and VPADDB instructions add packed byte integers from the first source operand and second source operand and store the packed integer results in the destination operand. When an individual result is too large to be represented in 8 bits (overflow), the result is wrapped around and the low 8 bits are written to the destination operand (that is, the carry is ignored).</p><p>The PADDW and VPADDW instructions add packed word integers from the first source operand and second source operand and store the packed integer results in the destination operand. When an individual result is too large to be represented in 16 bits (overflow), the result is wrapped around and the low 16 bits are written to the destination operand (that is, the carry is ignored).</p><p>The PADDD and VPADDD instructions add packed doubleword integers from the first source operand and second source operand and store the packed integer results in the destination operand. When an individual result is too large to be represented in 32 bits (overflow), the result is wrapped around and the low 32 bits are written to the destination operand (that is, the carry is ignored).</p><p>The PADDQ and VPADDQ instructions add packed quadword integers from the first source operand and second source operand and store the packed integer results in the destination operand. When a quadword result is too</p><p>large to be represented in 64 bits (overflow), the result is wrapped around and the low 64 bits are written to the destination operand (that is, the carry is ignored).</p><p>Note that the (V)PADDB, (V)PADDW, (V)PADDD and (V)PADDQ instructions can operate on either unsigned or signed (two's complement notation) packed integers; however, it does not set bits in the EFLAGS register to indicate overflow and/or a carry. To prevent undetected overflow conditions, software must control the ranges of values operated on.</p><p>EVEX encoded VPADDD/Q: The first source operand is a ZMM/YMM/XMM register. The second source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32/64-bit memory location. The destination operand is a ZMM/YMM/XMM register updated according to the writemask.</p><p>EVEX encoded VPADDB/W: The first source operand is a ZMM/YMM/XMM register. The second source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory location. The destination operand is a ZMM/YMM/XMM register updated according to the writemask.</p><p>VEX.256 encoded version: The first source operand is a YMM register. The second source operand is a YMM register or a 256-bit memory location. The destination operand is a YMM register. the upper bits (MAXVL-1:256) of the destination are cleared.</p><p>VEX.128 encoded version: The first source operand is an XMM register. The second source operand is an XMM register or 128-bit memory location. The destination operand is an XMM register. The upper bits (MAXVL-1:128) of the corresponding ZMM register destination are zeroed.</p><p>128-bit Legacy SSE version: The first source operand is an XMM register. The second operand can be an XMM register or an 128-bit memory location. The destination is not distinct from the first source XMM register and the upper bits (MAXVL-1:128) of the corresponding ZMM register destination are unmodified.</p>","href":"https://www.felixcloutier.com/x86/PADDB%3APADDW%3APADDD%3APADDQ.html"}}},
    "staticQueryHashes": ["3832154866","63159454"]}