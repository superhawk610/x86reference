{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/vextractf128:vextractf32x4:vextractf64x2:vextractf32x8:vextractf64x4",
    "result": {"pageContext":{"op":{"id":"vextractf128:vextractf32x4:vextractf64x2:vextractf32x8:vextractf64x4","variants":["VEXTRACTF32X4","VEXTRACTF64X2","VEXTRACTF128","VEXTRACTF32X8"],"variant_descriptions":{"VEXTRACTF128":"Extract 128 bits of packed floating-point values from ymm2 and store results in xmm1/m128.","VEXTRACTF32X4":"Extract 128 bits of packed single-precision floating-point values from ymm2 and store results in xmm1/m128 subject to writemask k1.","VEXTRACTF64X2":"Extract 128 bits of packed double-precision floating-point values from zmm2 and store results in xmm1/m128 subject to writemask k1.","VEXTRACTF32X8":"Extract 256 bits of packed single-precision floating-point values from zmm2 and store results in ymm1/m256 subject to writemask k1."},"text":"<p>VEXTRACTF128/VEXTRACTF32x4 and VEXTRACTF64x2 extract 128-bits of single-precision floating-point values from the source operand (the second operand) and store to the low 128-bit of the destination operand (the first operand). The 128-bit data extraction occurs at an 128-bit granular offset specified by imm8[0] (256-bit) or imm8[1:0] as the multiply factor. The destination may be either a vector register or an 128-bit memory location.</p><p>VEXTRACTF32x4: The low 128-bit of the destination operand is updated at 32-bit granularity according to the writemask.</p><p>VEXTRACTF32x8 and VEXTRACTF64x4 extract 256-bits of double-precision floating-point values from the source operand (second operand) and store to the low 256-bit of the destination operand (the first operand). The 256-bit data extraction occurs at an 256-bit granular offset specified by imm8[0] (256-bit) or imm8[0] as the multiply factor The destination may be either a vector register or a 256-bit memory location.</p><p>VEXTRACTF64x4: The low 256-bit of the destination operand is updated at 64-bit granularity according to the writemask.</p><p>VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD.</p><p>The high 6 bits of the immediate are ignored.</p><p>If VEXTRACTF128 is encoded with VEX.L= 0, an attempt to execute the instruction encoded with VEX.L= 0 will cause an #UD exception.</p>","href":"https://www.felixcloutier.com/x86/VEXTRACTF128%3AVEXTRACTF32x4%3AVEXTRACTF64x2%3AVEXTRACTF32x8%3AVEXTRACTF64x4.html"}}},
    "staticQueryHashes": ["3832154866","63159454"]}