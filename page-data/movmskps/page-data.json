{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/movmskps",
    "result": {"pageContext":{"op":{"id":"movmskps","variants":["VMOVMSKPS","MOVMSKPS"],"variant_descriptions":{"MOVMSKPS":"Extract 4-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.","VMOVMSKPS":"Extract 8-bit sign mask from ymm2 and store in reg. The upper bits of r32 or r64 are zeroed."},"text":"<p>Extracts the sign bits from the packed single-precision floating-point values in the source operand (second operand), formats them into a 4- or 8-bit mask, and stores the mask in the destination operand (first operand). The source operand is an XMM or YMM register, and the destination operand is a general-purpose register. The mask is stored in the 4 or 8 low-order bits of the destination operand. The upper bits of the destination operand beyond the mask are filled with zeros.</p><p>In 64-bit mode, the instruction can access additional registers (XMM8-XMM15, R8-R15) when used with a REX.R prefix. The default operand size is 64-bit in 64-bit mode.</p><p>128-bit versions: The source operand is a YMM register. The destination operand is a general purpose register.</p><p>VEX.256 encoded version: The source operand is a YMM register. The destination operand is a general purpose register.</p><p>Note: In VEX-encoded versions, VEX.vvvv is reserved and must be 1111b, otherwise instructions will #UD.</p>","href":"https://www.felixcloutier.com/x86/MOVMSKPS.html"}}},
    "staticQueryHashes": ["2451724630","3830446752","63159454"]}