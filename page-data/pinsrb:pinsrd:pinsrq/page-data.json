{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/pinsrb:pinsrd:pinsrq",
    "result": {"pageContext":{"op":{"id":"pinsrb:pinsrd:pinsrq","variants":["PINSRB","VPINSRD","PINSRD","VPINSRQ","PINSRQ","VPINSRB"],"variant_descriptions":{"PINSRB":"Insert a byte integer value from r32/m8 into xmm1 at the destination element in xmm1 specified by imm8.","PINSRD":"Insert a dword integer value from r/m32 into the xmm1 at the destination element specified by imm8.","PINSRQ":"Insert a qword integer value from r/m64 into the xmm1 at the destination element specified by imm8.","VPINSRB":"Merge a byte integer value from r32/m8 and rest from xmm2 into xmm1 at the byte offset in imm8.","VPINSRD":"Insert a dword integer value from r32/m32 and rest from xmm2 into xmm1 at the dword offset in imm8.","VPINSRQ":"Insert a qword integer value from r64/m64 and rest from xmm2 into xmm1 at the qword offset in imm8."},"text":"<p>Copies a byte/dword/qword from the source operand (second operand) and inserts it in the destination operand (first operand) at the location specified with the count operand (third operand). (The other elements in the destination register are left untouched.) The source operand can be a general-purpose register or a memory location. (When the source operand is a general-purpose register, PINSRB copies the low byte of the register.) The destination operand is an XMM register. The count operand is an 8-bit immediate. When specifying a qword[dword, byte] location in an XMM register, the [2, 4] least-significant bit(s) of the count operand specify the location.</p><p>In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15, R8-15). Use of REX.W permits the use of 64 bit general purpose registers.</p><p>128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged.</p><p>VEX.128 encoded version: Bits (MAXVL-1:128) of the destination register are zeroed. VEX.L must be 0, otherwise the instruction will #UD. Attempt to execute VPINSRQ in non-64-bit mode will cause #UD.</p><p>EVEX.128 encoded version: Bits (MAXVL-1:128) of the destination register are zeroed. EVEX.Lâ€™L must be 0, otherwise the instruction will #UD.</p>","href":"https://www.felixcloutier.com/x86/PINSRB%3APINSRD%3APINSRQ.html"}}},
    "staticQueryHashes": ["3832154866","63159454"]}