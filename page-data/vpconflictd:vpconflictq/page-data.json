{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/vpconflictd:vpconflictq",
    "result": {"pageContext":{"op":{"id":"vpconflictd:vpconflictq","variants":["VPCONFLICTQ","VPCONFLICTD"],"variant_descriptions":{"VPCONFLICTD":"Detect duplicate double-word values in zmm2/m512/m32bcst using writemask k1.","VPCONFLICTQ":"Detect duplicate quad-word values in zmm2/m512/m64bcst using writemask k1."},"text":"<p>Test each dword/qword element of the source operand (the second operand) for equality with all other elements in the source operand closer to the least significant element. Each elementâ€™s comparison results form a bit vector, which is then zero extended and written to the destination according to the writemask.</p><p>EVEX.512 encoded version: The source operand is a ZMM register, a 512-bit memory location, or a 512-bit vector broadcasted from a 32/64-bit memory location. The destination operand is a ZMM register, conditionally updated using writemask k1.</p><p>EVEX.256 encoded version: The source operand is a YMM register, a 256-bit memory location, or a 256-bit vector broadcasted from a 32/64-bit memory location. The destination operand is a YMM register, conditionally updated using writemask k1.</p><p>EVEX.128 encoded version: The source operand is a XMM register, a 128-bit memory location, or a 128-bit vector broadcasted from a 32/64-bit memory location. The destination operand is a XMM register, conditionally updated using writemask k1.</p><p>EVEX.vvvv is reserved and must be 1111b otherwise instructions will #UD.</p>","href":"https://www.felixcloutier.com/x86/VPCONFLICTD%3AVPCONFLICTQ.html"}}},
    "staticQueryHashes": ["3832154866","63159454"]}