{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/phsubsw",
    "result": {"pageContext":{"op":{"id":"phsubsw","variants":["VPHSUBSW","PHSUBSW"],"variant_descriptions":{"PHSUBSW":"Subtract 16-bit signed integer horizontally, pack saturated integers to xmm1.","VPHSUBSW":"Subtract 16-bit signed integer horizontally, pack saturated integers to ymm1."},"text":"<p>(V)PHSUBSW performs horizontal subtraction on each adjacent pair of 16-bit signed integers by subtracting the most significant word from the least significant word of each pair in the source and destination operands. The signed, saturated 16-bit results are packed to the destination operand (first operand). When the source operand is a 128-bit memory operand, the operand must be aligned on a 16-byte boundary or a general-protection exception (#GP) will be generated.</p><p>Legacy SSE version: Both operands can be MMX registers. The second source operand can be an MMX register or a 64-bit memory location.</p><p>128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged.</p><p>In 64-bit mode, use the REX prefix to access additional registers.</p><p>VEX.128 encoded version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the destination YMM register are zeroed.</p><p>VEX.256 encoded version: The first source and destination operands are YMM registers. The second source operand can be an YMM register or a 256-bit memory location.</p><p>Note: VEX.L must be 0, otherwise the instruction will #UD.</p>","href":"https://www.felixcloutier.com/x86/PHSUBSW.html"}}},
    "staticQueryHashes": ["2451724630","3830446752","63159454"]}