{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/movddup",
    "result": {"pageContext":{"op":{"id":"movddup","variants":["MOVDDUP","VMOVDDUP"],"variant_descriptions":{"MOVDDUP":"Move double-precision floating-point value from xmm2/m64 and duplicate into xmm1.","VMOVDDUP":"Move even index double-precision floating-point values from zmm2/m512 and duplicate each element into zmm1 subject to writemask k1."},"text":"<p>For 256-bit or higher versions: Duplicates even-indexed double-precision floating-point values from the source operand (the second operand) and into adjacent pair and store to the destination operand (the first operand).</p><p>For 128-bit versions: Duplicates the low double-precision floating-point value from the source operand (the second operand) and store to the destination operand (the first operand).</p><p>128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding destination register are unchanged. The source operand is XMM register or a 64-bit memory location.</p><p>VEX.128 and EVEX.128 encoded version: Bits (MAXVL-1:128) of the destination register are zeroed. The source operand is XMM register or a 64-bit memory location. The destination is updated conditionally under the writemask for EVEX version.</p><p>VEX.256 and EVEX.256 encoded version: Bits (MAXVL-1:256) of the destination register are zeroed. The source operand is YMM register or a 256-bit memory location. The destination is updated conditionally under the writemask for EVEX version.</p><p>EVEX.512 encoded version: The destination is updated according to the writemask. The source operand is ZMM register or a 512-bit memory location.</p><p>Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD.</p>","href":"https://www.felixcloutier.com/x86/MOVDDUP.html"}}},
    "staticQueryHashes": ["3832154866","63159454"]}