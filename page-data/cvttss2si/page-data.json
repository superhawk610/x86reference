{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/cvttss2si",
    "result": {"pageContext":{"op":{"id":"cvttss2si","variants":["VCVTTSS2SI","CVTTSS2SI"],"variant_descriptions":{"CVTTSS2SI":"Convert one single-precision floating-point value from xmm1/m32 to one signed quadword integer in r64 using truncation.","VCVTTSS2SI":"Convert one single-precision floating-point value from xmm1/m32 to one signed quadword integer in r64 using truncation."},"text":"<p>Converts a single-precision floating-point value in the source operand (the second operand) to a signed double-word integer (or signed quadword integer if operand size is 64 bits) in the destination operand (the first operand). The source operand can be an XMM register or a 32-bit memory location. The destination operand is a general purpose register. When the source operand is an XMM register, the single-precision floating-point value is contained in the low doubleword of the register.</p><p>When a conversion is inexact, a truncated (round toward zero) result is returned. If a converted result is larger than the maximum signed doubleword integer, the floating-point invalid exception is raised. If this exception is masked, the indefinite integer value (80000000H or 80000000_00000000H if operand size is 64 bits) is returned.</p><p>Legacy SSE instructions: In 64-bit mode, Use of the REX.W prefix promotes the instruction to 64-bit operation. See the summary chart at the beginning of this section for encoding data and limits.</p><p>VEX.W1 and EVEX.W1 versions: promotes the instruction to produce 64-bit data in 64-bit mode.</p><p>Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b, otherwise instructions will #UD.</p><p>Software should ensure VCVTTSS2SI is encoded with VEX.L=0. Encoding VCVTTSS2SI with VEX.L=1 may encounter unpredictable behavior across different processor generations.</p>","href":"https://www.felixcloutier.com/x86/CVTTSS2SI.html"}}},
    "staticQueryHashes": ["2451724630","3830446752","63159454"]}