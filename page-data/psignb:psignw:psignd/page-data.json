{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/psignb:psignw:psignd",
    "result": {"pageContext":{"op":{"id":"psignb:psignw:psignd","variants":["PSIGNB","PSIGND","VPSIGNB","VPSIGND","PSIGNW","VPSIGNW"],"variant_descriptions":{"PSIGNB":"Negate/zero/preserve packed byte integers in xmm1 depending on the corresponding sign in xmm2/m128.","PSIGNW":"Negate/zero/preserve packed word integers in xmm1 depending on the corresponding sign in xmm2/m128.","PSIGND":"Negate/zero/preserve packed doubleword integers in xmm1 depending on the corresponding sign in xmm2/m128.","VPSIGNB":"Negate packed byte integers in ymm2 if the corresponding sign in ymm3/m256 is less than zero.","VPSIGNW":"Negate packed 16-bit integers in ymm2 if the corresponding sign in ymm3/m256 is less than zero.","VPSIGND":"Negate packed doubleword integers in ymm2 if the corresponding sign in ymm3/m256 is less than zero."},"text":"<p>(V)PSIGNB/(V)PSIGNW/(V)PSIGND negates each data element of the destination operand (the first operand) if the signed integer value of the corresponding data element in the source operand (the second operand) is less than zero. If the signed integer value of a data element in the source operand is positive, the corresponding data element in the destination operand is unchanged. If a data element in the source operand is zero, the corresponding data element in the destination operand is set to zero.</p><p>(V)PSIGNB operates on signed bytes. (V)PSIGNW operates on 16-bit signed words. (V)PSIGND operates on signed 32-bit integers. When the source operand is a 128bit memory operand, the operand must be aligned on a 16-byte boundary or a general-protection exception (#GP) will be generated.</p><p>Legacy SSE instructions: Both operands can be MMX registers. In 64-bit mode, use the REX prefix to access additional registers.</p><p>128-bit Legacy SSE version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged.</p><p>VEX.128 encoded version: The first source and destination operands are XMM registers. The second source operand is an XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the destination YMM register are zeroed. VEX.L must be 0, otherwise instructions will #UD.</p><p>VEX.256 encoded version: The first source and destination operands are YMM registers. The second source operand is an YMM register or a 256-bit memory location.</p>","href":"https://www.felixcloutier.com/x86/PSIGNB%3APSIGNW%3APSIGND.html"}}},
    "staticQueryHashes": ["2451724630","3830446752","63159454"]}