{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/vpcompressd",
    "result": {"pageContext":{"op":{"id":"vpcompressd","variants":["VPCOMPRESSD"],"variant_descriptions":{"VPCOMPRESSD":"Compress packed doubleword integer values from zmm2 to zmm1/m512 using controlmask k1."},"text":"<p>Compress (store) up to 16/8/4 doubleword integer values from the source operand (second operand) to the destination operand (first operand). The source operand is a ZMM/YMM/XMM register, the destination operand can be a ZMM/YMM/XMM register or a 512/256/128-bit memory location.</p><p>The opmask register k1 selects the active elements (partial vector or possibly non-contiguous if less than 16 active elements) from the source operand to compress into a contiguous vector. The contiguous vector is written to the destination starting from the low element of the destination operand.</p><p>Memory destination version: Only the contiguous vector is written to the destination memory location. EVEX.z must be zero.</p><p>Register destination version: If the vector length of the contiguous vector is less than that of the input vector in the source operand, the upper bits of the destination register are unmodified if EVEX.z is not set, otherwise the upper bits are zeroed.</p><p>Note: EVEX.vvvv is reserved and must be 1111b otherwise instructions will #UD.</p><p>Note that the compressed displacement assumes a pre-scaling (N) corresponding to the size of one single element instead of the size of the full vector.</p>","href":"https://www.felixcloutier.com/x86/VPCOMPRESSD.html"}}},
    "staticQueryHashes": ["3832154866","63159454"]}