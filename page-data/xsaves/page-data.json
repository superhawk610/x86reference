{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/xsaves",
    "result": {"pageContext":{"op":{"id":"xsaves","variants":["XSAVES"],"variant_descriptions":{"XSAVES":"Save state components specified by EDX:EAX to mem with compaction, optimizing if possible."},"text":"<p>Performs a full or partial save of processor state components to the XSAVE area located at the memory address specified by the destination operand. The implicit EDX:EAX register pair specifies a 64-bit instruction mask. The specific state components saved correspond to the bits set in the requested-feature bitmap (RFBM), the logicalAND of EDX:EAX and the logical-OR of XCR0 with the IA32_XSS MSR. XSAVES may be executed only if CPL = 0.</p><p>The format of the XSAVE area is detailed in Section 13.4, “XSAVE Area,” of <em>Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1</em>. Like FXRSTOR and FXSAVE, the memory format used for x87 state depends on a REX.W prefix; see Section 13.5.1, “x87 State” of <em>Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1</em>.</p><p>Section 13.11, “Operation of XSAVES,” of <em>Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1</em> provides a detailed description of the operation of the XSAVES instruction. The following items provide a highlevel outline:</p><p>Use of a destination operand not aligned to 64-byte boundary (in either 64-bit or 32-bit modes) results in a general-protection (#GP) exception. In 64-bit mode, the upper 32 bits of RDX and RAX are ignored.</p><p>See Section 13.6, “Processor Tracking of XSAVE-Managed State,” of <em>Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 1</em> for discussion of the bitmap XMODIFIED and of the quantity XRSTOR_INFO.</p>","href":"https://www.felixcloutier.com/x86/XSAVES.html"}}},
    "staticQueryHashes": ["3832154866","63159454"]}