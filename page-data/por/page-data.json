{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/por",
    "result": {"pageContext":{"op":{"id":"por","variants":["VPOR","VPORD","VPORQ","POR"],"variant_descriptions":{"POR":"Bitwise OR of xmm2/m128 and xmm1.","VPOR":"Bitwise OR of ymm2/m256 and ymm3.","VPORD":"Bitwise OR of packed doubleword integers in zmm2 and zmm3/m512/m32bcst using writemask k1.","VPORQ":"Bitwise OR of packed quadword integers in zmm2 and zmm3/m512/m64bcst using writemask k1."},"text":"<p>Performs a bitwise logical OR operation on the source operand (second operand) and the destination operand (first operand) and stores the result in the destination operand. Each bit of the result is set to 1 if either or both of the corresponding bits of the first and second operands are 1; otherwise, it is set to 0.</p><p>In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15).</p><p>Legacy SSE version: The source operand can be an MMX technology register or a 64-bit memory location. The destination operand is an MMX technology register.</p><p>128-bit Legacy SSE version: The second source operand is an XMM register or a 128-bit memory location. The first source and destination operands can be XMM registers. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged.</p><p>VEX.128 encoded version: The second source operand is an XMM register or a 128-bit memory location. The first source and destination operands can be XMM registers. Bits (MAXVL-1:128) of the destination YMM register are zeroed.</p><p>VEX.256 encoded version: The second source operand is an YMM register or a 256-bit memory location. The first source and destination operands can be YMM registers.</p><p>EVEX encoded version: The first source operand is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32/64-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1 at 32/64-bit granularity.</p>","href":"https://www.felixcloutier.com/x86/POR.html"}}},
    "staticQueryHashes": ["2451724630","3830446752","63159454"]}