{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/vcvtss2usi",
    "result": {"pageContext":{"op":{"id":"vcvtss2usi","variants":["VCVTSS2USI"],"variant_descriptions":{"VCVTSS2USI":"Convert one single-precision floating-point value from xmm1/m32 to one unsigned quadword integer in r64."},"text":"<p>Converts a single-precision floating-point value in the source operand (the second operand) to an unsigned double-word integer (or unsigned quadword integer if operand size is 64 bits) in the destination operand (the first operand). The source operand can be an XMM register or a memory location. The destination operand is a general-purpose register. When the source operand is an XMM register, the single-precision floating-point value is contained in the low doubleword of the register.</p><p>When a conversion is inexact, the value returned is rounded according to the rounding control bits in the MXCSR register or the embedded rounding control bits. If a converted result cannot be represented in the destination format, the floating-point invalid exception is raised, and if this exception is masked, the integer value 2<sup>w</sup> â€“ 1 is returned, where w represents the number of bits in the destination format.</p><p>VEX.W1 and EVEX.W1 versions: promotes the instruction to produce 64-bit data in 64-bit mode.</p><p>Note: EVEX.vvvv is reserved and must be 1111b, otherwise instructions will #UD.</p>","href":"https://www.felixcloutier.com/x86/VCVTSS2USI.html"}}},
    "staticQueryHashes": ["2451724630","3830446752","63159454"]}