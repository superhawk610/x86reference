{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/pxor",
    "result": {"pageContext":{"op":{"id":"pxor","variants":["PXOR","VPXORQ","VPXOR","VPXORD"],"variant_descriptions":{"PXOR":"Bitwise XOR of xmm2/m128 and xmm1.","VPXOR":"Bitwise XOR of ymm3/m256 and ymm2.","VPXORD":"Bitwise XOR of packed doubleword integers in zmm2 and zmm3/m512/m32bcst using writemask k1.","VPXORQ":"Bitwise XOR of packed quadword integers in zmm2 and zmm3/m512/m64bcst using writemask k1."},"text":"<p>Performs a bitwise logical exclusive-OR (XOR) operation on the source operand (second operand) and the destination operand (first operand) and stores the result in the destination operand. Each bit of the result is 1 if the corresponding bits of the two operands are different; each bit is 0 if the corresponding bits of the operands are the same.</p><p>In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the form of REX.R permits this instruction to access additional registers (XMM8-XMM15).</p><p>Legacy SSE instructions 64-bit operand: The source operand can be an MMX technology register or a 64-bit memory location. The destination operand is an MMX technology register.</p><p>128-bit Legacy SSE version: The second source operand is an XMM register or a 128-bit memory location. The first source operand and destination operands are XMM registers. Bits (MAXVL-1:128) of the corresponding YMM destination register remain unchanged.</p><p>VEX.128 encoded version: The second source operand is an XMM register or a 128-bit memory location. The first source operand and destination operands are XMM registers. Bits (MAXVL-1:128) of the destination YMM register are zeroed.</p><p>VEX.256 encoded version: The first source operand is a YMM register. The second source operand is a YMM register or a 256-bit memory location. The destination operand is a YMM register. The upper bits (MAXVL-1:256) of the corresponding register destination are zeroed.</p><p>EVEX encoded versions: The first source operand is a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM register, a 512/256/128-bit memory location or a 512/256/128-bit vector broadcasted from a 32/64-bit memory location. The destination operand is a ZMM/YMM/XMM register conditionally updated with writemask k1.</p>","href":"https://www.felixcloutier.com/x86/PXOR.html"}}},
    "staticQueryHashes": ["3832154866","63159454"]}