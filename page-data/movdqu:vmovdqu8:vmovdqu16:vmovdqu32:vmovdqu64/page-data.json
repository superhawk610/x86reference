{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/movdqu:vmovdqu8:vmovdqu16:vmovdqu32:vmovdqu64",
    "result": {"pageContext":{"op":{"id":"movdqu:vmovdqu8:vmovdqu16:vmovdqu32:vmovdqu64","variants":["MOVDQU","VMOVDQU8","VMOVDQU16","VMOVDQU64","VMOVDQU32","VMOVDQU"],"variant_descriptions":{"MOVDQU":"Move unaligned packed integer values from xmm1 to xmm2/m128.","VMOVDQU":"Move unaligned packed integer values from ymm1 to ymm2/m256.","VMOVDQU8":"Move unaligned packed byte integer values from zmm1 to zmm2/m512 using writemask k1.","VMOVDQU16":"Move unaligned packed word integer values from zmm1 to zmm2/m512 using writemask k1.","VMOVDQU32":"Move unaligned packed doubleword integer values from zmm1 to zmm2/m512 using writemask k1.","VMOVDQU64":"Move unaligned packed quadword integer values from zmm1 to zmm2/m512 using writemask k1."},"text":"<p>Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise instructions will #UD.</p><p><strong>EVEX encoded versions:</strong></p><p>Moves 128, 256 or 512 bits of packed byte/word/doubleword/quadword integer values from the source operand (the second operand) to the destination operand (first operand). This instruction can be used to load a vector register from a memory location, to store the contents of a vector register into a memory location, or to move data between two vector registers.</p><p>The destination operand is updated at 8-bit (VMOVDQU8), 16-bit (VMOVDQU16), 32-bit (VMOVDQU32), or 64-bit (VMOVDQU64) granularity according to the writemask.</p><p><strong>VEX.256 encoded version:</strong></p><p>Moves 256 bits of packed integer values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load a YMM register from a 256-bit memory location, to store the contents of a YMM register into a 256-bit memory location, or to move data between two YMM registers.</p><p>Bits (MAXVL-1:256) of the destination register are zeroed.</p><p>Moves 128 bits of packed integer values from the source operand (second operand) to the destination operand (first operand). This instruction can be used to load an XMM register from a 128-bit memory location, to store the contents of an XMM register into a 128-bit memory location, or to move data between two XMM registers.</p><p><strong>128-bit Legacy SSE version</strong>: Bits (MAXVL-1:128) of the corresponding destination register remain unchanged.</p><p>When the source or destination operand is a memory operand, the operand may be unaligned to any alignment without causing a general-protection exception (#GP) to be generated</p><p><strong>VEX.128 encoded version</strong>: Bits (MAXVL-1:128) of the destination register are zeroed.</p>","href":"https://www.felixcloutier.com/x86/MOVDQU%3AVMOVDQU8%3AVMOVDQU16%3AVMOVDQU32%3AVMOVDQU64.html"}}},
    "staticQueryHashes": ["2451724630","3830446752","63159454"]}