{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/fxsave",
    "result": {"pageContext":{"op":{"id":"fxsave","variants":["FXSAVE"],"variant_descriptions":{"FXSAVE":"Save the x87 FPU, MMX, XMM, and MXCSR register state to m512byte."},"text":"<p>Saves the current state of the x87 FPU, MMX technology, XMM, and MXCSR registers to a 512-byte memory location specified in the destination operand. The content layout of the 512 byte region depends on whether the processor is operating in non-64-bit operating modes or 64-bit sub-mode of IA-32e mode.</p><p>Bytes 464:511 are available to software use. The processor does not write to bytes 464:511 of an FXSAVE area.</p><p>The operation of FXSAVE in non-64-bit modes is described first.</p><p><a href=\"https://www.felixcloutier.com/x86/FXSAVE.html#tbl-3-43\" rel=\"noreferrer noopener\" target=\"_blank\">Table 3-43</a> shows the layout of the state information in memory when the processor is operating in legacy modes.</p><p>The destination operand contains the first byte of the memory image, and it must be aligned on a 16-byte boundary. A misaligned destination operand will result in a general-protection (#GP) exception being generated (or in some cases, an alignment check exception [#AC]).</p><p>The FXSAVE instruction is used when an operating system needs to perform a context switch or when an exception handler needs to save and examine the current state of the x87 FPU, MMX technology, and/or XMM and MXCSR registers.</p><p>The fields in <a href=\"https://www.felixcloutier.com/x86/FXSAVE.html#tbl-3-43\" rel=\"noreferrer noopener\" target=\"_blank\">Table 3-43</a> are defined in <a href=\"https://www.felixcloutier.com/x86/FXSAVE.html#tbl-3-44\" rel=\"noreferrer noopener\" target=\"_blank\">Table 3-44</a>.</p><p>The FXSAVE instruction saves an abridged version of the x87 FPU tag word in the FTW field (unlike the FSAVE instruction, which saves the complete tag word). The tag information is saved in physical register order (R0 through R7), rather than in top-of-stack (TOS) order. With the FXSAVE instruction, however, only a single bit (1 for valid or 0 for empty) is saved for each tag. For example, assume that the tag word is currently set as follows:</p><p>R7 R6 R5 R4 R3 R2 R1 R0</p><p>11 xx xx xx 11 11 11 11</p><p>Here, 11B indicates empty stack elements and “xx” indicates valid (00B), zero (01B), or special (10B).</p><p>For this example, the FXSAVE instruction saves only the following 8 bits of information:</p><p>R7 R6 R5 R4 R3 R2 R1 R0</p>","href":"https://www.felixcloutier.com/x86/FXSAVE.html"}}},
    "staticQueryHashes": ["3832154866","63159454"]}