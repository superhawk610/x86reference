{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/jcc",
    "result": {"pageContext":{"op":{"id":"jcc","variants":["JNL","JCXZ","JNB","JBE","JGE","JRCXZ","JNBE","JNGE","JZ","JNLE","JNG","JNC","JP","JAE","JG","JECXZ","JPE","JNAE","JO","JNS","JNA","JNE","JE","JS","JLE","JA","JL","JNO","JPO","JC","JB","JNP","JNZ"],"variant_descriptions":{"JA":"Jump near if above (CF=0 and ZF=0).","JAE":"Jump near if above or equal (CF=0).","JB":"Jump near if below (CF=1).","JBE":"Jump near if below or equal (CF=1 or ZF=1).","JC":"Jump near if carry (CF=1).","JCXZ":"Jump short if CX register is 0.","JECXZ":"Jump short if ECX register is 0.","JRCXZ":"Jump short if RCX register is 0.","JE":"Jump near if equal (ZF=1).","JG":"Jump near if greater (ZF=0 and SF=OF).","JGE":"Jump near if greater or equal (SF=OF).","JL":"Jump near if less (SF≠ OF).","JLE":"Jump near if less or equal (ZF=1 or SF≠ OF).","JNA":"Jump near if not above (CF=1 or ZF=1).","JNAE":"Jump near if not above or equal (CF=1).","JNB":"Jump near if not below (CF=0).","JNBE":"Jump near if not below or equal (CF=0 and ZF=0).","JNC":"Jump near if not carry (CF=0).","JNE":"Jump near if not equal (ZF=0).","JNG":"Jump near if not greater (ZF=1 or SF≠ OF).","JNGE":"Jump near if not greater or equal (SF≠ OF).","JNL":"Jump near if not less (SF=OF).","JNLE":"Jump near if not less or equal (ZF=0 and SF=OF).","JNO":"Jump near if not overflow (OF=0).","JNP":"Jump near if not parity (PF=0).","JNS":"Jump near if not sign (SF=0).","JNZ":"Jump near if not zero (ZF=0).","JO":"Jump near if overflow (OF=1).","JP":"Jump near if parity (PF=1).","JPE":"Jump near if parity even (PF=1).","JPO":"Jump near if parity odd (PF=0).","JS":"Jump near if sign (SF=1).","JZ":"Jump near if 0 (ZF=1)."},"text":"<p>Checks the state of one or more of the status flags in the EFLAGS register (CF, OF, PF, SF, and ZF) and, if the flags are in the specified state (condition), performs a jump to the target instruction specified by the destination operand. A condition code (<em>cc</em>) is associated with each instruction to indicate the condition being tested for. If the condition is not satisfied, the jump is not performed and execution continues with the instruction following the J<em>cc</em> instruction.</p><p>The target instruction is specified with a relative offset (a signed offset relative to the current value of the instruction pointer in the EIP register). A relative offset (<em>rel8</em>, <em>rel16,</em> or <em>rel32</em>) is generally specified as a label in assembly code, but at the machine code level, it is encoded as a signed, 8-bit or 32-bit immediate value, which is added to the instruction pointer. Instruction coding is most efficient for offsets of –128 to +127. If the operand-size attribute is 16, the upper two bytes of the EIP register are cleared, resulting in a maximum instruction pointer size of 16 bits.</p><p>The conditions for each J<em>cc</em> mnemonic are given in the “Description” column of the table on the preceding page. The terms “less” and “greater” are used for comparisons of signed integers and the terms “above” and “below” are used for unsigned integers.</p><p>Because a particular state of the status flags can sometimes be interpreted in two ways, two mnemonics are defined for some opcodes. For example, the JA (jump if above) instruction and the JNBE (jump if not below or equal) instruction are alternate mnemonics for the opcode 77H.</p><p>The J<em>cc</em> instruction does not support far jumps (jumps to other code segments). When the target for the conditional jump is in a different segment, use the opposite condition from the condition being tested for the J<em>cc</em> instruction, and then access the target with an unconditional far jump (JMP instruction) to the other segment. For example, the following conditional far jump is illegal:</p>","href":"https://www.felixcloutier.com/x86/Jcc.html"}}},
    "staticQueryHashes": ["2451724630","3830446752","63159454"]}