{
    "componentChunkName": "component---src-templates-op-tsx",
    "path": "/subss",
    "result": {"pageContext":{"op":{"id":"subss","variants":["SUBSS","VSUBSS"],"variant_descriptions":{"SUBSS":"Subtract the low single-precision floating-point value in xmm2/m32 from xmm1 and store the result in xmm1.","VSUBSS":"Subtract the low single-precision floating-point value in xmm3/m32 from xmm2 and store the result in xmm1 under writemask k1."},"text":"<p>Subtract the low single-precision floating-point value from the second source operand and the first source operand and store the double-precision floating-point result in the low doubleword of the destination operand.</p><p>The second source operand can be an XMM register or a 32-bit memory location. The first source and destination operands are XMM registers.</p><p>128-bit Legacy SSE version: The destination and first source operand are the same. Bits (MAXVL-1:32) of the corresponding destination register remain unchanged.</p><p>VEX.128 and EVEX encoded versions: Bits (127:32) of the XMM register destination are copied from corresponding bits in the first source operand. Bits (MAXVL-1:128) of the destination register are zeroed.</p><p>EVEX encoded version: The low doubleword element of the destination operand is updated according to the writemask.</p><p>Software should ensure VSUBSS is encoded with VEX.L=0. Encoding VSUBSD with VEX.L=1 may encounter unpredictable behavior across different processor generations.</p>","href":"https://www.felixcloutier.com/x86/SUBSS.html"}}},
    "staticQueryHashes": ["2451724630","3830446752","63159454"]}